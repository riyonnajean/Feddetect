package com.example.fed;

import android.content.Context;
import org.tensorflow.lite.Interpreter;

import java.io.File;
import java.io.FileOutputStream;
import java.io.FileInputStream;
import java.io.IOException;
import java.nio.MappedByteBuffer;
import java.nio.channels.FileChannel;

public class TFLiteMalwareDetector {
    private Interpreter interpreter;
    private Context context;

    // Constructor to initialize the model
    public TFLiteMalwareDetector(Context context) throws IOException {
        this.context = context;
        interpreter = new Interpreter(loadModelFile(context, "malware_detection_model.tflite"));
    }

    // Load model file from the assets folder
    private MappedByteBuffer loadModelFile(Context context, String modelPath) throws IOException {
        FileInputStream inputStream = new FileInputStream(context.getAssets().openFd(modelPath).getFileDescriptor());
        FileChannel fileChannel = inputStream.getChannel();
        long startOffset = context.getAssets().openFd(modelPath).getStartOffset();
        long declaredLength = context.getAssets().openFd(modelPath).getDeclaredLength();
        return fileChannel.map(FileChannel.MapMode.READ_ONLY, startOffset, declaredLength);
    }

    // Predict method to make predictions using the model
    public float predict(float[] features) {
        // Prepare the output tensor (1x1 shape)
        float[][] output = new float[1][1];

        // Run inference with the model
        interpreter.run(features, output);

        // Return the prediction result
        return output[0][0];  // Model outputs a single value, return it
    }

    // Save prediction output to a text file for later analysis
    public void savePredictionOutput(File outputFile, float prediction) throws IOException {
        try (FileOutputStream outputStream = new FileOutputStream(outputFile, true)) {
            // Format the prediction result as a string
            String result = "Prediction: " + prediction + "\n";
            // Save to the file
            outputStream.write(result.getBytes());
        }
    }

    // Log the detection data (features and result) to a log file for record-keeping
    public void logDetectionData(float[] features, boolean isMalware) {
        File logFile = new File(context.getFilesDir(), "detection_log.txt");
        try (FileOutputStream fos = new FileOutputStream(logFile, true)) {
            // Format the log entry (features and the malware status)
            String log = "Features: " + arrayToString(features) + ", Malware Detected: " + isMalware + "\n";
            // Write log data to the file
            fos.write(log.getBytes());
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    // Helper method to convert float array to a comma-separated string for logging
    private String arrayToString(float[] array) {
        StringBuilder sb = new StringBuilder();
        for (float value : array) {
            sb.append(value).append(", ");
        }
        return sb.toString();
    }

    // Simulated method to log features and indicate model updates
    public boolean updateModel(float[] features, boolean isMalware) {
        logDetectionData(features, isMalware); // Log the detection data
        boolean isModelUpdated = isMalware; // Simulate update logic
        return isModelUpdated;
    }

    // Simulated method to save the updated model
    public void saveUpdatedModel(File updatedModelFile) throws IOException {
        try (FileOutputStream outputStream = new FileOutputStream(updatedModelFile)) {
            // Simulate saving the updated model data (This will not actually retrain the model)
            outputStream.write("Updated Model Data".getBytes());
        }
    }

    // Close the TensorFlow Lite interpreter to release resources
    public void close() {
        interpreter.close();
    }
}
