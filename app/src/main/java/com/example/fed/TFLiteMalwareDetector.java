package com.example.fed;

import android.content.Context;
import org.tensorflow.lite.Interpreter;

import java.io.File;
import java.io.FileOutputStream;
import java.io.FileInputStream;
import java.io.IOException;
import java.nio.MappedByteBuffer;
import java.nio.channels.FileChannel;

public class TFLiteMalwareDetector {
    private Interpreter interpreter;

    public TFLiteMalwareDetector(Context context, String modelPath) throws IOException {
        interpreter = new Interpreter(loadModelFile(context, modelPath));
    }

    private MappedByteBuffer loadModelFile(Context context, String modelPath) throws IOException {
        try (FileInputStream inputStream = new FileInputStream(context.getAssets().openFd(modelPath).getFileDescriptor())) {
            FileChannel fileChannel = inputStream.getChannel();
            long startOffset = context.getAssets().openFd(modelPath).getStartOffset();
            long declaredLength = context.getAssets().openFd(modelPath).getDeclaredLength();
            return fileChannel.map(FileChannel.MapMode.READ_ONLY, startOffset, declaredLength);
        }
    }

    public float predict(float[] features) {
        float[][] output = new float[1][1];
        interpreter.run(features, output);
        return output[0][0];
    }

    public void logDetectionData(File logFile, float[] features, boolean isMalware) {
        try (FileOutputStream fos = new FileOutputStream(logFile, true)) {
            String log = "Features: " + arrayToString(features) + ", Malware Detected: " + isMalware + "\n";
            fos.write(log.getBytes());
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private String arrayToString(float[] array) {
        StringBuilder sb = new StringBuilder();
        for (float value : array) {
            sb.append(value).append(", ");
        }
        return sb.toString();
    }

    public void close() {
        if (interpreter != null) {
            interpreter.close();
        }
    }
}


